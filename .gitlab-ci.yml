stages:
  - test
  - build
  - deploy

variables:
  IMAGE_NAME: "cloud-storage-application"
  DOCKER_REPO: "aniket28z/cloud-storage-application"  # Replace with your Docker Hub repository name
  DOCKER_REGISTRY: "docker.io"


test:
  stage: test
  image: python:3.9

  script:
    - pip install -r requirements.txt  # Install dependencies
    - python -m test # Run tests
  artifacts:
    paths:
      - test-reports/  # Save test reports as artifacts


build_image:
  stage: build
  image: docker:latest
  services:
    - docker:dind

  before_script:
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin $DOCKER_REGISTRY
  - export DOCKER_CONFIG=/path/to/docker/config/dir  # Update with the path to your Docker configuration directory

  script:
    - docker build -t $IMAGE_NAME .
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin $DOCKER_REGISTRY
    - docker tag $IMAGE_NAME $DOCKER_REPO:latest
    - docker push $DOCKER_REPO:latest

deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache kubectl  # Install kubectl
    - echo "$KUBE_CONFIG" > /root/.kube/config  # Set kubeconfig
  script:
    - kubectl apply -f kubernetes/deployment.yaml  # Apply Kubernete deployment
    - kubectl apply -f kubernetes/service.yaml  # Apply Kubernetes service
  environment:
    name: production
  only:
    - master

